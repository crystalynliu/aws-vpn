#!/usr/bin/env bash
usage(){
  echo "Usage: $0 <reset|start|stop|start_tunnel|stop_tunnel|check_tunnel>"
  exit 1
}

update_host(){
  sed -i -e '/local.personal.vpn/d' /etc/hosts
  echo "$1 local.personal.vpn" >> /etc/hosts
}

query_vpn_ip(){
  echo `aws ec2 describe-instances --filters Name=tag:aws:cloudformation:stack-name,Values=personal-vpn Name=instance-state-name,Values=running --query "Reservations[0].Instances[0].PublicIpAddress"`
}

query_autoscaling_name(){
  echo `aws cloudformation describe-stacks --stack-name personal-vpn --query "Stacks[0].Outputs[?OutputKey=='AutoScalingName']|[0].OutputValue"`
}

reset_vpn_ip(){
  local ip=`query_vpn_ip`
  if [[ -z "$ip" || "$ip" == "null" ]]; then
    echo "Failed to fetch vpn ip address"
    exit 1
  fi

  update_host ${ip//\"}
}

stop_vpn_server(){
  local name=`query_autoscaling_name`
  if [[ -z "${name}" || "$ip" == "null" ]]; then
    echo "Failed to fetch autoscaling name"
    exit 1
  fi
  aws autoscaling update-auto-scaling-group --auto-scaling-group-name ${name//\"} --min-size 0 --desired-capacity 0
}

start_vpn_server(){
  local name=`query_autoscaling_name`
  if [[ -z "$name" || "$ip" == "null" ]]; then
    echo "Failed to fetch autoscaling name"
    exit 1
  fi
  aws autoscaling update-auto-scaling-group --auto-scaling-group-name ${name//\"} --min-size 1 --desired-capacity 1
}

start_ssh_tunnel(){
  local key_path=$1
  if [[ ! -f "$key_path" ]]; then
    echo "${key_path} is not a file"
    exit 1
  fi
	ssh -M -S personal-vpn-socket -f -i $key_path -D 15888 -C -q -N ubuntu@local.personal.vpn
}

stop_ssh_tunnel(){
	ssh -S personal-vpn-socket -O exit ubuntu@local.personal.vpn
}

check_ssh_tunnel(){
	ssh -S personal-vpn-socket -O check ubuntu@local.personal.vpn
}

check_environment(){
  if [[ -z "$AWS_DEFAULT_REGION" ]]; then
    echo "Please set AWS_DEFAULT_REGION"
    exit 1
  fi
}

main(){
  case $1 in
    "reset")
      check_environment
      reset_vpn_ip
      ;;
    "start")
      check_environment
      start_vpn_server
      ;;
    "stop")
      check_environment
      stop_vpn_server
      ;;
    "start_tunnel")
      check_environment
      start_ssh_tunnel ./personal-vpn.pem
      ;;
    "stop_tunnel")
      stop_ssh_tunnel
      ;;
    "check_tunnel")
      check_ssh_tunnel
      ;;
    *)
      usage
      ;;
  esac
}

main $@
